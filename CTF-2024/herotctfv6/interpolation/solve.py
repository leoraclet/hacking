points = [
    [
        27022258133638429367452390584379428299762718636344121298786655315389491572557,
        70333071867357292667670419933912658699354646373482942607618706737896657662814,
    ],
    [
        68802171310130488027994018940714815872574357733532039359806014364469103109372,
        42512790699462279665382217252313265212125035364990106782531542004011669775030,
    ],
    [
        33845084711794831823396957552260247862174229201779409010056869516425541396144,
        19612764714500875466688762407828687952926638351922019472179852000891617338734,
    ],
    [
        55361399727950021205156663536632335795492713053044747770440060479516212272034,
        98762312460259240974845461727057433010314883334015133432657163106309073735287,
    ],
    [
        102323357491193575941307929612411112191166451326844220404183966793285560776463,
        85315107403919976355065239831934422814819408970744849841324224109292162856824,
    ],
    [
        2564022558762074256330859595664753634684586689480161855979750220439271383217,
        696777557527193704151336202896721113293247170679168823410513382172379245534,
    ],
    [
        87424898705505457935623970178829441396386780059718907457210892663208639505786,
        11495375013650224463158361033648544488394938273163359635328705012848348524719,
    ],
    [
        14277998347980132546345758487741608980256121741622779048254273737294902047259,
        67252445254548684705856486993706831010774965244854991018375404507843907680903,
    ],
    [
        66316272020380416610980213981333489809132666355867264753035320502208354324131,
        48675346641238061128572845625908007231290826210251938140463169052308029545939,
    ],
    [
        43238103525618993365945211055440103020445450404388924801051291773263909178245,
        64219956531016949993616746848675951792670507328696097295522848487793435360956,
    ],
    [
        38189975187767914631521119187730422243867153303405620998285612481371482498856,
        42733836375684612766141638261411458711456796332739658314169408456472788390572,
    ],
    [
        13382744510786125657493050572592662201034761786748136133310305661070054776255,
        106522011861987678731862567835113008886547511139355723494986086909221966488964,
    ],
    [
        68158954703240144530557128206035908469500696977166351177427444931386329043305,
        63888813583666769249308240330744355925952206556831699688895052571778287362624,
    ],
    [
        73114447634570874900067519206718525442141304477758730267180610294159348443920,
        59950595800033065912666516469824500756969111778177657243113320165856365143035,
    ],
    [
        25310454821967154948915455619261301539563494324670075123750472588270251944405,
        113447777703198659896674383333450110371062488900100478858011625430188339450704,
    ],
    [
        110184766834492775499497805048770686106825732387422769389652239134673721212473,
        34859749153645320112035657341653490358877706822100119824941251098459212295988,
    ],
    [
        95317999486075969721098083763957845879143521499552505241042464737828531116605,
        74163657452792800360725080904524778121912078770540063464297441335320115103505,
    ],
    [
        1386023010195533972672865039700811952131121629539260247573902817680643396302,
        38077611041630906420704644195642093523327778181416994863394920835894887480420,
    ],
    [
        23090442381839325922311785552517653215618396033542429075411574959589727037328,
        110707278011491021305240784724791629317215645502746135280469483580358428568227,
    ],
    [
        92887703997266906338484153461199646942792189162835628183930614663983063500397,
        53669015969424725027780009406044944342827085471425001562795326753469100273583,
    ],
    [
        39509460968335892749558620278813152723313008258808294917754138007303692923917,
        82783686045987640020635392230301313411603464609820536113504396259289529916568,
    ],
    [
        35523351027102203658886385995073534274861076775127444115273241428805104336937,
        77545976950907339048824629269526558767964099840181210171967761344566520867271,
    ],
    [
        25237792610133130436807481731512105378776543696906911427857864627856475901973,
        57849343462947357277714251991571351520141434292233692208998200103556207558910,
    ],
]

P = 2**256 - 189
degree = len(points)

def _extended_gcd(a, b):
    """
    Division in integers modulus p means finding the inverse of the
    denominator modulo p and then multiplying the numerator by this
    inverse (Note: inverse of A is B such that A*B % p == 1). This can
    be computed via the extended Euclidean algorithm
    http://en.wikipedia.org/wiki/Modular_multiplicative_inverse#Computation
    """
    x = 0
    last_x = 1
    y = 1
    last_y = 0
    while b != 0:
        quot = a // b
        a, b = b, a % b
        x, last_x = last_x - quot * x, x
        y, last_y = last_y - quot * y, y
    return last_x, last_y

def _divmod(num, den, p):
    """Compute num / den modulo prime p

    To explain this, the result will be such that:
    den * _divmod(num, den, p) % p == num
    """
    inv, _ = _extended_gcd(den, p)
    return num * inv

def _lagrange_interpolate(x, x_s, y_s, p):
    """
    Find the y-value for the given x, given n (x, y) points;
    k points will define a polynomial of up to kth order.
    """
    k = len(x_s)
    assert k == len(set(x_s)), "points must be distinct"
    def PI(vals):  # upper-case PI -- product of inputs
        accum = 1
        for v in vals:
            accum *= v
        return accum
    nums = []  # avoid inexact division
    dens = []
    for i in range(k):
        others = list(x_s)
        cur = others.pop(i)
        nums.append(PI(x - o for o in others))
        dens.append(PI(cur - o for o in others))
    den = PI(dens)
    num = sum([_divmod(nums[i] * den * y_s[i] % p, dens[i], p)
               for i in range(k)])
    return (_divmod(num, den, p) + p) % p

def recover_secret(shares, prime=P):
    """
    Recover the secret from share points
    (points (x,y) on the polynomial).
    """
    if len(shares) < 3:
        raise ValueError("need at least three shares")
    x_s, y_s = zip(*shares)
    return _lagrange_interpolate(0, x_s, y_s, prime)


print()

import hashlib
from math import e

print(b'Hero{lolsdfsdf}'[4:8])
print(int(hashlib.sha256(b"Hero").hexdigest(), 16))

coefficients = [
    51862623363251592162508517414206794722184767070638202339849823866691337237984,
    37382279584575671665412736907293996338695993273870192478675632069138612724862,
    54922548012150305957596790093591596584466927559339793497872781061995644787934,
    78252810134582863205690878209501272813895928209727562041762503202357420752872,
    42828444749577646348433379946210116268681295505955485156998041972023283883825,
    16605552275238206773988750913306730384585706182539455749829662274657349564685,
    10009681240064642703458239750230614173777134131788316383198404412696086812123,
    78645989056858155953548111309497253790838184388240819797824701948971210482613,
    4244268215373067710299345981438357655695365045434952475766578691548900068884,
    4587316730151077745530345853110346550953429707066041958662730783235705675823,
    98676420105970876355731743378079563095438931888109560800924537433679751968410,
    15596341609452054024790211046165535925702287406391095849367220616094959319247,
    32403908412257070302225532346590438994349383666861558172214850130936584778364,
    115533839068795212658451397535765278473898133068309149603041276877934373391258,
    7092396080272228853132842491037895182885372693653833621714864119915575351959,
    66681440692524165569992671994842901187406728987456386756946647843877275534778,
    43594818259201189283635356607462328520192502107771693650896092861477784342431,
    91842050171741174464568525719602040646922469791657773826919079592778110767648,
    105484582062398143020926667398250530293520625898492636870365251172877956081489,
    48478433129988933656911497337570454952912987663301800112434018755270886790086,
    9286536496641678624961072298289256247776902880262474453231051084428770229931,
    71177914266346294875020009514904614231152252028035180341047573071890295627281,
    58688474918974956495962699109478986243962548972465028067725936901754910032197,
    91356407137791927144958613770622174607926961061379368852376771002781151613901,
]

chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_{}"

FLAG = "Hero"
for i in range(len(coefficients), len(coefficients)):
    for c1 in chars:
        for c2 in chars:
            for c3 in chars:
                for c4 in chars:
                    if int(hashlib.sha256((c1 + c2 + c3 + c4).encode()).hexdigest(), 16) == coefficients[i]:
                        FLAG += str(c1 + c2 + c3 + c4)
                        print(FLAG)
                        break

FLAG = "Hero{th3r3_4r3_tw0_typ35_0f_p30pl3_1n_th15_w0rld_th053_wh0_c4n_3xtr4p0l4t3_fr0m_1nc0mpl3t3_d474}"
print(FLAG)
print(len(FLAG))
