use std::fs;
use rand::{rngs::StdRng, RngCore, SeedableRng};
use std::net::UdpSocket;

/* static lookup table for AES SBox and multiplication */
static RCON_TABLE: [u8; 11] = [
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36,
];

static SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

static M2: [u8; 256] = [
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
    0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
    0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
    0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
    0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
    0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
    0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
    0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
    0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5,
];

static M3: [u8; 256] = [
    0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
    0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
    0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
    0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
    0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
    0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
    0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
    0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,
    0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
    0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
    0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,
    0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
    0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
    0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,
    0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
    0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a,
];

/*Useful functions for AES*/
fn rotword(word: &[u8; 4]) -> [u8; 4] {
    let mut shifted = [0u8; 4];
    for i in 1..5 {
        shifted[i - 1] = word[i % 4];
    }
    shifted
}

fn rcon(i: usize) -> [u8; 4] {
    if i >= 11 {
        panic!("Invalid integer for rcon, not implement for 11 and above");
    }
    [RCON_TABLE[i], 0, 0, 0]
}

fn get_ith_word(key: &[u8; 16], i: u8) -> [u8; 4] {
    let start: usize = (i * 4).into();
    let stop: usize = ((i + 1) * 4).into();

    key[start..stop].try_into().expect("Incorrect slice length")
}

/* Functions for AES Key schedule */
fn subword(word: &[u8; 4]) -> [u8; 4] {
    let mut substituted = [0u8; 4];
    for i in 0..4 {
        let index: usize = word[i].into();
        substituted[i] = SBOX[index];
    }
    substituted
}

fn xorword(word1: &[u8; 4], word2: &[u8; 4]) -> [u8; 4] {
    let mut xored_word = *word1;
    for i in 0..4 {
        xored_word[i] ^= word2[i]
    }
    xored_word
}

/* Key Expansion for AES128*/
fn expand_key(key: &[u8; 16]) -> [[u8; 16]; 11] {
    let mut expanded_key = [[0u8; 16]; 11];
    expanded_key[0] = *key;

    for i in 1..11 {
        let mut word: [u8; 4] = get_ith_word(&expanded_key[i - 1], 3);
        word = rotword(&word);
        word = subword(&word);
        word = xorword(&word, &get_ith_word(&expanded_key[i - 1], 0));
        word = xorword(&word, &rcon(i));
        for j in 0..4 {
            expanded_key[i][j] = word[j];
        }
        for j in 1..4 {
            word = xorword(
                &get_ith_word(&expanded_key[i - 1], j),
                &get_ith_word(&expanded_key[i], j - 1),
            );
            for k in 0..4 {
                let index: usize = (4 * j).into();
                expanded_key[i][index + k] = word[k];
            }
        }
    }
    expanded_key
}

/* Functions for AES round function */
fn sub_bytes(state: &mut [[u8; 4]; 4]) {
    for i in 0..4 {
        let substituted = subword(&state[i]);
        for j in 0..4 {
            state[i][j] = substituted[j];
        }
    }
}

fn shift_rows(state: &mut [[u8; 4]; 4]) {
    for i in 1..4 {
        let mut shifted = vec![0u8; i];
        for j in 0..i {
            shifted[j] = state[i][j];
        }
        for j in 0..4 - i {
            state[i][j] = state[i][i + j];
        }
        for j in 0..i {
            state[i][3 - j] = shifted[i - j - 1];
        }
    }
}

fn mix_columns(state: &mut [[u8; 4]; 4]) {
    for i in 0..4 {
        let x0: usize = state[0][i].into();
        let x1: usize = state[1][i].into();
        let x2: usize = state[2][i].into();
        let x3: usize = state[3][i].into();

        state[0][i] = M2[x0] ^ M3[x1] ^ (x2 as u8) ^ (x3 as u8);
        state[1][i] = (x0 as u8) ^ M2[x1] ^ M3[x2] ^ (x3 as u8);
        state[2][i] = (x0 as u8) ^ (x1 as u8) ^ M2[x2] ^ M3[x3];
        state[3][i] = M3[x0] ^ (x1 as u8) ^ (x2 as u8) ^ M2[x3];
    }
}

fn add_rk(state: &mut [[u8; 4]; 4], rk: [u8; 16]) {
    for i in 0..4 {
        for j in 0..4 {
            state[i][j] ^= rk[i + j * 4];
        }
    }
}

/* Useful functions to convert/pad */
fn array2state(array: &[u8; 16]) -> [[u8; 4]; 4] {
    let mut state = [[0u8; 4]; 4];

    for i in 0..4 {
        for j in 0..4 {
            state[i][j] = array[i + 4 * j];
        }
    }
    state
}

fn state2array(state: &[[u8; 4]; 4]) -> [u8; 16] {
    let mut array = [0u8; 16];

    for i in 0..4 {
        for j in 0..4 {
            array[i + 4 * j] = state[i][j];
        }
    }
    array
}

fn pad(plaintext: Vec<u8>) -> Vec<u8> {
    let mut padded = plaintext.clone();
    let plen = plaintext.len() % 16;
    for _i in 0..(16 - plen) {
        padded.push(plen as u8);
    }
    padded
}

/* Defining struct and implementation */
pub struct AES128 {
    round_keys: [[u8; 16]; 11],
    iv: [u8; 16],
}

impl AES128 {
    /* Initialize an AES128 struct from an IV and an initial key */
    pub fn new(key: &[u8; 16], iv: &[u8; 16]) -> AES128 {
        /* Assert that key size is 128 bits */
        if key.len() != 16 {
            panic!("Illegal key size");
        }
        /* Expand key to get round keys */
        let round_keys = expand_key(key);

        AES128 {
            round_keys,
            iv: *iv,
        }
    }

    /* Encrypt a 128 bits block */
    fn encrypt_block(&self, block: &[u8; 16]) -> [u8; 16] {
        /* Init state */
        let mut state = array2state(block);

        add_rk(&mut state, self.round_keys[0]);

        for i in 1..10 {
            sub_bytes(&mut state);
            shift_rows(&mut state);
            mix_columns(&mut state);
            add_rk(&mut state, self.round_keys[i]);
        }
        /* Last round doesn't have mixcolumns */
        sub_bytes(&mut state);
        shift_rows(&mut state);
        add_rk(&mut state, self.round_keys[10]);

        state2array(&state)
    }

    /* Encrypt arbitrary long byte vector in mode CBC*/
    pub fn encrypt(&self, plaintext: Vec<u8>) -> Vec<u8> {
        /* Pad it to get the right size */
        let plaintext = pad(plaintext);

        let mut ciphertext: Vec<u8> = vec![];
        let mut iv = self.iv;

        /* Encrypt each block */
        for i in 0..(plaintext.len() / 16) {
            let mut block: [u8; 16] =
                plaintext[(i * 16)..((i + 1) * 16)]
                    .try_into()
                    .expect(&format!(
                        "Incorrect block size, must be 16 but found {}",
                        plaintext[0..(i * 16)].len()
                    ));

            for i in 0..16 {
                block[i] ^= iv[i];
            }

            block = self.encrypt_block(&block);
            ciphertext.extend_from_slice(&block);
            iv = block;
        }

        ciphertext
    }
}

static M: [u8; 16] = [1, 1, 2, 0x91, 1, 2, 0x91, 1, 2, 0x91, 1, 1, 0x91, 1, 1, 2];

pub struct KeyDeriver {
    key: [u8; 16],
    rng: StdRng,
    counter: u8,
    pub tr: [u8; 16],
}

fn multiply(i: u8, j: u8, m: u8) -> u8 {
    let mut a = i;
    let mut b = j;
    let mut p = 0;
    while a != 0 && b != 0 {
        if b & 1 == 1 {
            p ^= a;
        }
        if (a & 0x80) >> 7 == 1 {
            a <<= 1;
            a ^= m;
        } else {
            a <<= 1;
        }
        b >>= 1;
    }
    p
}

impl KeyDeriver {
    pub fn new(key: &[u8; 16], seed: u64) -> KeyDeriver {
        KeyDeriver {
            key: *key,
            rng: StdRng::seed_from_u64(seed),
            counter: 1,
            tr: M,
        }
    }

    pub fn iter(&mut self) -> [u8; 16] {
        self.mix();
        self.counter = (1 + self.counter) % 16;

        self.key
    }

    fn mix(&mut self) {
        let index: usize = (self.rng.next_u32() % 16) as usize;
        for i in 0..4 {
            for j in 0..4 {
                self.key[i * 4 + j] = 0;
                for k in 0..4 {
                    self.key[i * 4 + j] ^=
                        multiply(self.tr[i * 4 + k], self.key[k * 4 + j], 0b1011111);
                }
            }
        }

        if self.tr[index] == self.counter {
            self.swap_tr(self.counter as usize, index);
        }

        for i in 0..4 {
            for j in 0..4 {
                for k in 0..4 {
                    self.tr[i * 4 + j] ^=
                        multiply(self.tr[i * 4 + k], self.tr[k * 4 + j], 0b1011111);
                }
            }
        }
    }

    fn swap_tr(&mut self, i: usize, j: usize) {
        self.tr[i] ^= self.tr[j]; // tr[i] = tr[i] ^ tr[j]
        self.tr[j] ^= self.tr[i]; // tr[j] = tr[i] ^ tr[j] = tr[i] ^ tr[j] ^ tr[j] = tr[i]
        self.tr[i] ^= self.tr[j]; // tr[i] = tr[i] ^ tr[j] = tr[i] ^ tr[j] ^ tr[i] = tr[j]
    }
}

fn send(socket: &UdpSocket, data: &[u8]) {
	socket.send_to(data, "172.17.0.2:1337").expect("couldn't send data");
}

fn main() {
	// let socket = UdpSocket::bind("172.17.0.1:34254").expect("couldn't bind to address");

	let flag: Vec<u8> = fs::read("flag.png").expect("Unable to read flag");

	/* Init RNGs */
	let mut rng = StdRng::from_os_rng();
	let mut seed_generator = StdRng::from_os_rng();

	/* Init key */
	let mut master_key = [0u8; 16];
	rng.fill_bytes(&mut master_key);

	/* Init KDF */
	let mut kdf = KeyDeriver::new(&master_key, seed_generator.next_u64());

	for _k in 0..200 {
		let key = kdf.iter();
		println!("{:02X?}", key);

		let mut iv = [0u8; 16];
		rng.fill_bytes(&mut iv);

		let cipher = AES128::new(&key, &iv);

		let mut encrypted = cipher.encrypt(flag.clone());

		/* Add IV to the packet */
		encrypted.extend(iv);

		// send(&socket, &encrypted[..]);
	}

	println!();
	print!("Master key:");
	println!("{:02X?}", master_key);
	print!("Tr:");
	println!("{:02X?}", kdf.tr);
}