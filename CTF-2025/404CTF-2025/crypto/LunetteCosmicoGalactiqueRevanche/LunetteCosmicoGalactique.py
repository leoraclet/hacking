import os
from math import gcd, log

from Crypto.Util.number import getPrime, isPrime

t = 64
a, b, M = getPrime(512), getPrime(512), 2**2048

seed = int.from_bytes(os.urandom(2048)) % M
FLAG = b"404CTF{LunetteCosmicoGalactiqueRevanche}"


def gen():
    global seed
    seed = (a * seed + b) % M
    return seed


def genPrime():
    g = gen()
    while not isPrime(g):
        g += 1
    return g


def genRandom():
    g = gen()
    return g >> t



print("A :", a)
print("B :", b)

gens = []
for _ in range(3):
    gens.append((genRandom() << 64) + 2**62)

print(gens)

# print()
# for i in range(len(seeds) - 1):
#     print(seeds[i] - gens[i])

# gens = [
#     288657040481406434513937980300367602280601009198531526413245719864368237889782636832529822139416041456487243376791604484506079960106376898143411762871023937310891000658768880882642508533402596243267327002179700130659665170762984265810921692048761329067936370304693627023685193941932513040627654389394748026471362471886995467651654587048646851539372401910079718793904417209603218897845732573676845459323525060492576996396084310600973856305943096568181699166306840588340442339387458408393237996095585121189350270257874458848656762302932362821433090868409761165342541851759884986566409699976762029182,
#     745138793974871081360252190314514224883210428784010294632293153535343730718035742203058066166232488027550958447883440253745408300950767396458474719496711355669804086026225674564918569788603642186902458211130380965447297023693729857956781684834686551985470466465433910919443479720322525451008654827021383508832220605504802559266495732475743364039915945448411762029324766442776065719338938212781534411288177855341349597494331369344152526272026132253979745607967121261055707974542904825659587492135339357296697871635955211121904407378504747553304492035435083557357080856260476723881466837315575642164,
#     422997789274108342282841712737868521568986963816718302425065248326599462780145732668354127651679440801602450324869011656678276678140590891780905598002756376549986768016930619035464477952596772677060668194196577097845112475591576910596885801779695065673958394730245950883968169655923567767518732884995992938122093468595910569543352018340088190245924882877500820790359834912937801563656673458431806726944350967895468194380948065849843856321201875379825324845575018968111010254502233155523279148409187782723073600923856601572101240713416182535467316924967295678450629475777336216792992194704431103539,
# ]
# n1 = 0x4B6C5BD6BE309387011FA930C8952F4B19D039E420ABB26FD4337FD3482231446C86097C64A087ACAF62B932EED6E2ADECAA3C6ADBBABEDFE33BCAA94B616719192D4F8AD8373341848C1C05448DDB61EE23983CA54E780D95E582625419C1D8129514F71E89F2B00D55EDCA8E455F5031A3E798E264E0178248FDCB32274D0EDF22D3262B60498C2C250C446D1FB0B9F162973AF6824045A6DC46BF5613CB1098D8F4382B4125CCE563E26E8AC38C8C42863734E7069DB0E343DB169F906610EB3144F06EEDDBCC50F0E0E3A5ABFC2B29A9C13497B8A73B6B0F21F6EB529FBB09794F9DD16A54B508B8367E89C2169742FF7E92B8715B08B1D3DFD42AF9171651A751A33DC4FA5781A538ED7B9BA381CEF79F79BC60980BD172C76143E604F6D0505896B82F95C97A463D05D165B7EDEFA42C9A874EAE743A54CE84D0CC04685E8BED5CFBFDA35E51A51693D75875ABD82F4A358FD4440807FBB3095EDDB83E51EF6E9FD16CB527CB08519318F3166B275E5A744FD28EE40946CAFC2DDDCDD07342EA45C560700017EBC6E780BE8A08C58478D78BBAF12B09E9D57602377526F9695CCA57E9FFD6EF45A339752B39EC1BAD97A2A1C5DFFC50E0A7649E3850B425B6E4BA5B65D57EC465B811FE4CC3AE9CFB0ACF4FB36CF495D393920173A1FDC9858A5E160D25CA36D3E96C64779383741C15F6E193AD4BF201233E141CF71
# c1 = 0x9E9D51282FB895D9D9F82E718560379EE782F8ECC128D81740E9B15FE315EAE37C2CEDC388EF9A7C8A1325CDDCC622A2DC5448612BA87BD38A5E970680C4DDF14084FC3EE9DB0F0EDD842DEA2F5269963FC739C1B63FE051B587F6E5FE9BDF43E61E75FECC70FE94F4C149E09D40513938B4DD449D9969D48C62EFEEDE89F706118BFDB859D5C7FAD5203F76718A550C6E6287D4F21AED9E97DB2FC8A838A55516C3166A972D09B63121E41B6229B5EBAB85BF823E4EDC68202752549797BE20A35C8C0483183FA84BA40A387C0530344D63B235E1585D9CA81B5D5D5E6A161A53160046B87CA9C9412179CDCD320218A95BA9E910013EEFAC89B55D3EF222D1B80742D99D7831E370444F25AB5CD4F1ACCBEAC0F27E0DC9EDF172795831BCDCE9CFD53636FB5ACBE2A9FEBDEC5BE5C20BAB11236A2E64BFF32D41534886D91FF5DA79D711EA3FC105F52644C9EE1D3F2016624888586EC219F61B360CBD22C8CB2D1BC5681F27FF95AA004C5B59B96892ED1DEA942B2600DD3BEDD1B88544950D356F0B3C7497A87541B4CAF630A1599F4F27F4D64FEBD069FF8BCC13F142809CB10B83E06705D019F50558A4E57A877228D08175792B09FEE9C6FBBE3E720CA576E37B576C8AE5EA4559F2E736033A2E1C04CE4FF58968F80E83F1C79FCA42ADB08496E6D33C3086D17959B8BEE651C9D9AF2BEC5AF392732EF3559D08D9
# n2 = 0xBB4909B4ED6E9641553E466A67ACDB60EB6AFD4841F5D5FF715620E0CA235AA80401F7836271C31376E0E90B427E466D5A3E85FA6875F4EA58566EC242E4264AF22031A441A8B046323D4BA8E8BDCBA46E322F539A8FCB409B5C6D89F54D91609183F7DC216C70940B6BD80523BD1023A1BD00D64D1F39398E69F0570275E9FC834A92FD2AB84A9A13BDC833C2B59F09A05CA0C7E42C0D9C43A3A81C59F858804F8BC01FABEA3EFC74807BE45BE37F78C8DC09D5320D052160A9F6A683FB2C2492CA12795EF3605EB97F8C8159E066D1E1C9C3504DD78BF074FAC62087C832FC11F0E62B0CA4473E515A7CA4056B8E28CFCE78087CFE79C362A5E8C06529BE4AC35CC1A35B6B10CDF2A04AF3C24DB0A298F98ED14863A3B3C98F0FBCC54736B2AEBDDC960F6F16AFBB3FA668C010223DB7854C663BF35E8CF0D4FFDD9F461B6B24092BAB01B5EE5077FB98785B8EAE4C27CDD756E29FFDD8EFFE26003CCDBB29C84EF452686C2E789A69255443B7894335273350F979A852AA8B11CBA7BE83C386CD514E8B0582D889BA218F482294F24C5444D96B23A43CA2DD32DA3CBAFB23034FB5553B3049D24851CFC996A6DC14318D6E48367E35AFA465EFC1CECB116FDD7F2BD94BADEA77EEB969301014F68CADEB894E70AF2A26AAE8ADA3599EBB1D7921FAB4F206BB9CC2F6065EB1682BBD1B520D1504C68D32DED3888537CF6B
# c2 = 0x

####################################
# SAGEMATH SOLVE
####################################

# y1, y2, y3 = gens

# v1 = vector(ZZ, [1, 0, 0, 2**64 * (y2 - y1)])
# v2 = vector(ZZ, [0, 1, 0, 2**64 * (y3 - y2)]])
# v3 = vector(ZZ, [0, 0, 1, 2**2048])

# M = Matrix(ZZ, [v1, v2, v3])
# M_lll = M.LLL()

# print("Original matrix:")
# print(M)
# print("\nLLL-reduced matrix:")
# print(M_lll)
